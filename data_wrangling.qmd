---
title: "Amplicon sequencing data wrangling"
author: "Johan S. SÃ¡enz"
format:
  gfm:
    toc: true
    html-math-method: katex
    css: styles.css
    code-fold: show
---

## THE AIM

This tutorial would guide you across the data analysis of amplicon sequences obtained from grass ensilaging during 40 days.

![Grass ensilagin in glass jars durion 40 days](data_wrangling_files/IMG_6246.png){fig-align="center" width="187"}

## Setting the working space

First, we need to organize and set up our working environment. You need to create a **project** folder an inside that, you should create **code**, **rawdata** and **figures** folder. Move all the data to the **rawdata** folder.

Use the function `setwd()` to select the current working directory of the **R** processes.

Use `install.packages()` to install necessary libraries and `library()` to load the package. You need to install the packages once in your installation life time but `library()` must be run every new session.

```{r}
#setting working direectory
setwd("~/Documents/github/coding_club/")

#install.packages("tidyverse")
library(tidyverse)
```

Next, use the functions `read.table()` or `read_tsv()` to load the data frames located in the **rawdata** folder. This new object should be visible in your environment.

```{r}
#| warning: false

counts <- read.table("raw_data/feature-table_ampli.tsv",
                     header = TRUE, #it recognize first row as header
                     sep = "\t") #how is the file separated (e.g ",", ";")

taxonomy <- read_tsv("raw_data/taxonomy_ampli.tsv")

metadata <-  read_tsv("raw_data/weight_ph_data.txt") %>% 
             rename(samples=Sample)
```

## Clean taxonomy file

The taxonomy file has several problems:

1.  The column containing the **OTUID** is call **Feature ID.** We can rename it using `rename()`

2.  The taxon variable contain all the taxonomic levels in one string. We can separate it using `separate().`The option `sep=""` can be used to separate the string by different characters. In this case we use the **;** character.

3.  We want to have a clean and simple data frame. Because of that we can select the wanted variables using `select()` and the names of the variables.

4.  The phylum names contain the extra characters " p\_\_", which create noise in our analysis. We can use `mutate()` combine with `str_replace()`, to modify the string in the phylum variable. **Notice that we are not creating a new variable but modifying the existing one.**

::: callout-note
Try to replace "p\_\_" by other string. For example "Phylum:"
:::

```{r}
#| warning: false
taxonomy <- read_tsv("raw_data/taxonomy_ampli.tsv") %>% 
  rename(OTUID='Feature ID') %>%
  separate(Taxon,
           into=c("superkingdom", "phylum", "class", "order", "family", "genus", "species"),
           sep = ";") %>%
  select(OTUID, phylum) %>% 
  mutate(phylum=str_replace(phylum, " p__", ""))

head(taxonomy) #check the first 5 row of the dataframe
```

In this example, you should obtained a data frame with the dimension 324x2. The two variables are the **OTUID** and the taxonomic level **phylum**.

## Pivot the data and add taxonomy information

R works better with long data frames. Because of that we can transform our data frame using `pivot_longer()`. With this function all the names from the columns are re organize in a new variable as well as their values per row (`names_to` and `values_to`). When you pivot a data frame, at least one variable should not be pivot. In this cases we use **-OTUID** to indicate the column.

The **counts** data frame and **taxonomy** share a common variable (**OTUID**). We can use that variable to merge the data using `inner_join()`. `inner_join()` would keep all rows that are share by both data frames.

::: callout-note
Check the function `left_join()`, `right_join()`, `full_join()` and `pivot_wider()`. Do you get a different result joining the data?.
:::

```{r}
#| warning: false
counts %>% 
  pivot_longer(-OTUID,
               names_to = "samples",
               values_to = "values") %>%
  inner_join(taxonomy, by="OTUID") 

```

## Replace taxon names

Microbial taxonomy is difficult :( . Sometimes, a name or taxonomy can not be assigned to a DNA sequence and we need to deal with that. What cases do we have? :

1.  An empty value, no name no taxonomy.

2.  The taxon can be call candidatus_xx. This probably means there is not a cultivated reference similar to that sequence.

3.  The taxon is call unclassified (That is self explanatory), but sometimes a taxon can be classify at Phylum level and not to lower levels. In that case we find names like: Family =unclassified_Lactobacillaceae.

As we want to standardize our names, we can rename those taxa with unfamiliar names. In that way we can group them later in the same group. For that we can use the function `mutate()` and `if_else()`. With the function `mutate()` you can add new variables and rewrite existing ones. On the other hand, `if_else()`, is a bit more complicated, because it works as a conditional. For example `if_else(is.na(phylum), "Uclassified", phylum))` if phylum is a missing value, rename to "Unclassified", if not keep the value in phylum. This works great when we have empty or missing values.

```{r}
#| warning: false
counts %>% 
  pivot_longer(-OTUID,
               names_to = "samples",
               values_to = "values") %>%
  inner_join(taxonomy, by="OTUID") %>% 
  mutate(phylum=if_else(is.na(phylum), "Uclassified", phylum))

```

More often, when want to replace existing strings or text. In that case we can use `str_replace()`. This functions is quite versatile if you combine it with [Regex](https://cran.r-project.org/web/packages/stringr/vignettes/regular-expressions.html) (regular expressions). Have a look at the example, we used . and \* as special characters to match all characters after "candidatus" and "unclassified". The . would match any character and \* would match 0 or more times the previous character.

```{r}
#An example for a different string
data.frame(taxon=c("candidatus xy", "candidatus Johan", "candidatus_xy", 
                   "unclassified xy","unclassified_xz")) %>% 
  mutate(taxon=str_replace(taxon, "candidatus.*", "Unclassified"),
         taxon=str_replace(taxon, "unclassified.*", "Unclassifed"))
```

## Calculate relative abundance

```{r}
#| warning: false
counts %>% 
  pivot_longer(-OTUID,
               names_to = "samples",
               values_to = "values") %>%
  inner_join(taxonomy, by="OTUID") %>% 
  mutate(phylum=if_else(is.na(phylum), "Uclassified", phylum)) %>% 
  group_by(samples, phylum) %>% 
  summarise(sum_values =sum(values), .groups = "drop") %>% 
  group_by(samples) %>% 
  mutate(rel_abun = 100*(sum_values/sum(sum_values)))

```

## Add metadata and calculate mean relative abundance per group

```{r}
#| warning: false
counts %>% 
  pivot_longer(-OTUID,
               names_to = "samples",
               values_to = "values") %>%
  inner_join(taxonomy, by="OTUID") %>% 
  mutate(phylum=if_else(is.na(phylum), "Uclassified", phylum)) %>% 
  group_by(samples, phylum) %>% 
  summarise(sum_values =sum(values), .groups = "drop") %>% 
  group_by(samples) %>% 
  mutate(rel_abun = 100*(sum_values/sum(sum_values))) %>% 
  inner_join(metadata, by="samples") %>% 
  select(samples, phylum, Day, rel_abun) %>% 
  group_by(phylum, Day) %>% 
  summarise(mean_rel_abun = mean(rel_abun))
```

## Create a bar plot

**`ggplot`** is on of the more powerful tools in R. It will allow you to create several simple and complex plots. Lets start with a bar plot.

We can connect the `ggplot()` function with our pipe but after, all `ggplot` layers must be conected with the `+`symbol. Everything inside the Aesthetic mappings (`aes()`) describe how variables in the data are mapped to visual properties. In this case we are mapping the samples with the counts and filling the bars with the phylum names.

```{r}
#| warning: false
counts %>% 
  pivot_longer(-OTUID,
               names_to = "samples",
               values_to = "values") %>%
  inner_join(taxonomy, by="OTUID") %>% 
  mutate(phylum=if_else(is.na(phylum), "Uclassified", phylum)) %>% 
  group_by(samples, phylum) %>% 
  summarise(sum_values =sum(values), .groups = "drop") %>% 
  group_by(samples) %>% 
  mutate(rel_abun = 100*(sum_values/sum(sum_values))) %>% 
  inner_join(metadata, by="samples") %>% 
  select(samples, phylum, Day, rel_abun) %>% 
  group_by(phylum, Day) %>% 
  summarise(mean_rel_abun = mean(rel_abun), .groups = "drop") %>% 
  ggplot(aes(x = Day,
             y = mean_rel_abun,
             fill = phylum)) +
  geom_bar(stat = "identity")
```

## Create a factor with the data (correct x-axis) and PIMP your plot

```{r}
#| warning: false
counts %>% 
  pivot_longer(-OTUID,
               names_to = "samples",
               values_to = "values") %>%
  inner_join(taxonomy, by="OTUID") %>% 
  mutate(phylum=if_else(is.na(phylum), "Uclassified", phylum)) %>% 
  group_by(samples, phylum) %>% 
  summarise(sum_values =sum(values), .groups = "drop") %>% 
  group_by(samples) %>% 
  mutate(rel_abun = 100*(sum_values/sum(sum_values))) %>% 
  inner_join(metadata, by="samples") %>% 
  select(samples, phylum, Day, rel_abun) %>% 
  group_by(phylum, Day) %>% 
  summarise(mean_rel_abun = mean(rel_abun), .groups = "drop") %>% 
  ggplot(aes(x = factor(Day,
                        levels = c(0, 2,4,8,15,40)), 
             y = mean_rel_abun,
             fill = phylum)) +
  geom_bar(stat = "identity") +
  scale_y_continuous(expand = c(0,0)) + # modify scale 
  labs(x ="Days", # axis names
       y = "Relative abundance (%)") +
  theme_classic()
```

## Select colors for bar plot

By default, if you do not set or select a color palette, R would do it for you. That is not always the best option. Explore the tool [Color Brewer](https://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3) to pull 8 different colors and create a vector as shown below.

After, you can add a new layer to the pipe to set the color palette chosen by you using `scale_fill_manual(values = col_values)`

```{r}
col_values <- c('#e41a1c','#377eb8','#4daf4a','#984ea3',
                 '#ff7f00','#ffff33')

counts %>% 
  pivot_longer(-OTUID,
               names_to = "samples",
               values_to = "values") %>%
  inner_join(taxonomy, by="OTUID") %>% 
  mutate(phylum=if_else(is.na(phylum), "Uclassified", phylum)) %>% 
  group_by(samples, phylum) %>% 
  summarise(sum_values =sum(values), .groups = "drop") %>% 
  group_by(samples) %>% 
  mutate(rel_abun = 100*(sum_values/sum(sum_values))) %>% 
  inner_join(metadata, by="samples") %>% 
  select(samples, phylum, Day, rel_abun) %>% 
  group_by(phylum, Day) %>% 
  summarise(mean_rel_abun = mean(rel_abun), .groups = "drop") %>% 
  ggplot(aes(x = factor(Day,
                        levels = c(0, 2,4,8,15,40)), 
             y = mean_rel_abun,
             fill = phylum)) +
  geom_bar(stat = "identity") +
  scale_y_continuous(expand = c(0,0)) +
  scale_fill_manual(values = col_values) +# modify scale 
  labs(x ="Days", # axis names
       y = "Relative abundance (%)") +
  theme_classic()
```
