---
title: "Data wrangling from amplicon sequencing"
author: "Johan S. SÃ¡enz"
format:
  gfm:
    toc: true
    html-math-method: katex
    css: styles.css
    code-fold: show
---

This tutorial would guide you across the data analysis of amplicon sequences obtained from grass ensilaging during 40 days.

![Grass ensilagin in glass jars durion 40 days](data_wrangling_files/IMG_6246.png){fig-align="center" width="187"}

## Setting the working space

First, we need to organize and set up our working environment. You need to create a **project** folder an inside that, you should create **code**, **rawdata** and **figures** folder. Move all the data to the **rawdata** folder.

Use the function `setwd()` to select the current working directory of the **R** processes.

Use `install.packages()` to install necessary libraries and `library()` to load the package. You need to install the packages once in your installation life time but `library()` must be run every new session.

```{r}
#setting working direectory
setwd("~/Documents/github/coding_club/")

#install.packages("tidyverse")
library(tidyverse)
```

Next, use the functions `read.table()` or `read_tsv()` to load the data frames located in the **rawdata** folder. This new object should be visible in your environment.

```{r}
#| warning: false

counts <- read.table("raw_data/feature-table_ampli.tsv",
                     header = TRUE, #it recognize first row as header
                     sep = "\t") #how is the file separated (e.g ",", ";")

taxonomy <- read_tsv("raw_data/taxonomy_ampli.tsv")

metadata <-  read_tsv("raw_data/weight_ph_data.txt")
```

## Clean taxonomy file

The taxonomy file has several problems:

1.  The column containing the **OTUID** is call **Feature ID.** We can rename it using `rename()`

2.  The taxon variable contain all the taxonomic levels in one string. We can separate it using `separate().`The option `sep=""` can be used to separate the string by diferent characters. In this case we use the **;** character.

3.  We want to have a clean and simple data frame. Because of that we can select the wanted variables using `select()` and the names of the variables.

4.  The phylum names contain the extra characters " p\_\_", which create noise in our analysis. We can use `mutate()` combine with `str_replace()`, to modify the string in the phylum variable. **Notice that we are not creating a new variable but modifying the existing one.**

:::{.callout-note}
Try to replace p\_\_ by other string. For example Phylum:
:::

```{r}
#| warning: false
taxonomy <- read_tsv("raw_data/taxonomy_ampli.tsv") %>% 
  rename(OTUID='Feature ID') %>%
  separate(Taxon,
           into=c("superkingdom", "phylum", "class", "order", "family", "genus", "species"),
           sep = ";") %>%
  select(OTUID, phylum) %>% 
  mutate(phylum=str_replace(phylum, " p__", ""))

head(taxonomy) #chec the first 5 row of the dataframe
```

In this example, you should obtained a data frame with the dimension 324x2. The two variables are the **OTUID** and the taxonomic level **phylum**.

## Pivot the data and add taxonomy information

```{r}
#| warning: false
counts %>% 
  pivot_longer(-OTUID,
               names_to = "sample",
               values_to = "counts") %>%
  inner_join(taxonomy, by="OTUID") 

```

## Create a bar plot 

```{r}
#| warning: false

```


## Select colors for barplot

[Color Brewer](https://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3)

```{r}
bar_colors <- c('#8dd3c7','#ffffb3','#bebada','#fb8072','#80b1d3','#fdb462',
                '#b3de69','#fccde5','#d9d9d9','#bc80bd')
```

